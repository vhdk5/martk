WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.960
我们已经把第一年的数据嵌入到损益表中

00:00:03.960 --> 00:00:05.550
继续处理第二年的数据时

00:00:05.550 --> 00:00:09.570
却发现数据显示出错

00:00:09.570 --> 00:00:15.780
AVGO 的第一年数据是原数据的第一行

00:00:15.780 --> 00:00:17.610
而处理其他数据时

00:00:17.610 --> 00:00:21.915
直接输入行号来表示需要哪一行数据 就变得越来越难

00:00:21.915 --> 00:00:28.425
例如 想要股票代码 CSRA 的数据 或者 HPE 的第三年数据时 就不能这么做了

00:00:28.425 --> 00:00:33.170
需要同时满足股票代码和年份的条件

00:00:33.170 --> 00:00:38.560
才将相应的值代入到表格

00:00:38.560 --> 00:00:41.440
这里就要用到 Match 函数

00:00:41.440 --> 00:00:43.610
接下来 我们利用一个例子进行详细讲解

00:00:43.610 --> 00:00:47.405
我们刚刚只匹配了一个条件 — 股票代码

00:00:47.405 --> 00:00:49.715
这是我们想填充的表格

00:00:49.715 --> 00:00:51.875
而这是我们需要提取的数据

00:00:51.875 --> 00:00:56.125
这里原本还有几列其他财务指标 已经暂时隐藏起来

00:00:56.125 --> 00:01:01.910
刚刚 我们只匹配了股票代码 AVGO 这一种条件

00:01:01.910 --> 00:01:03.020
现在

00:01:03.020 --> 00:01:06.245
我并列显示了所需的工作表

00:01:06.245 --> 00:01:09.020
第一列是股票代码

00:01:09.020 --> 00:01:12.060
隐藏不需要的一列 接着一列是总收入

00:01:12.060 --> 00:01:14.110
我们希望表格里

00:01:14.110 --> 00:01:18.530
选择至少符合这一个股票代码的值

00:01:18.530 --> 00:01:21.805
那么 在使用 INDEX 函数时

00:01:21.805 --> 00:01:24.230
就不是在函数里直接输入行号 1

00:01:24.230 --> 00:01:28.955
而是当股票代码匹配为 AVGO 时 能直接匹配对应的行

00:01:28.955 --> 00:01:33.500
这是位置的匹配

00:01:33.500 --> 00:01:39.200
满足条件时 利用MATCH 函数 就可以返回股票代码范围中相对位置的编号

00:01:39.200 --> 00:01:41.240
这是股票代码范围

00:01:41.240 --> 00:01:45.005
将这个范围命名为 ticker_symbol

00:01:45.005 --> 00:01:47.780
函数 MATCH H2

00:01:47.780 --> 00:01:48.995
也就是这个股票代码

00:01:48.995 --> 00:01:52.050
Ticker_symbol 范围就是指这个区域

00:01:52.050 --> 00:01:55.970
如果匹配查询方式是 1

00:01:55.970 --> 00:02:01.655
MATCH 就会查找小于等于查找值的最大值

00:02:01.655 --> 00:02:03.605
如果匹配查询方式是 0

00:02:03.605 --> 00:02:08.495
则会查找完全等于查找值的第一个值

00:02:08.495 --> 00:02:11.540
还有另一种匹配查询方式是 -1

00:02:11.540 --> 00:02:16.145
查找的是大于等于查找值的最小值

00:02:16.145 --> 00:02:19.495
我们在下方文本框举了例子

00:02:19.495 --> 00:02:22.780
假设 查询方式是 0

00:02:22.780 --> 00:02:26.509
现在 MATCH 要查找的是

00:02:26.509 --> 00:02:30.215
Ticker_symbol 范围里匹配 AVGO 的位置

00:02:30.215 --> 00:02:32.660
这个单元格就是我们设的第一个匹配条件

00:02:32.660 --> 00:02:35.570
也就是 MATCH 函数里的查找值

00:02:35.570 --> 00:02:38.705
我们用蓝色高亮显示查找值

00:02:38.705 --> 00:02:43.730
Ticker_symbol 是指这一列股票代码

00:02:43.730 --> 00:02:46.115
0 是我们的匹配查询方式

00:02:46.115 --> 00:02:47.620
按 Enter 键

00:02:47.620 --> 00:02:49.830
返回的值是 1

00:02:49.830 --> 00:02:52.290
我把函数公式写在这里 以便你参考

00:02:52.290 --> 00:02:55.155
要返回结果则要同时按 Ctrl + Shift + Enter 键

00:02:55.155 --> 00:02:56.850
这是返回的值

00:02:56.850 --> 00:03:01.990
我们把这个值 1 嵌入 INDEX 函数的这个位置

00:03:01.990 --> 00:03:07.710
我们也可以把 MATCH 函数的整个公式嵌入到 INDEX 函数

00:03:07.710 --> 00:03:09.315
因为正如提示所见

00:03:09.315 --> 00:03:13.210
INDEX 函数的这个位置 表示行号

00:03:13.210 --> 00:03:16.855
而 MATCH 函数返回的值就是所需的行号

00:03:16.855 --> 00:03:20.960
这里的列号为 0

00:03:20.960 --> 00:03:25.265
表示局限在总收入一列的范围内

00:03:25.265 --> 00:03:32.460
匹配符合行条件的第一个值 但局限在列 0 即该列本身

00:03:32.460 --> 00:03:35.585
最后返回的是这个值

00:03:35.585 --> 00:03:38.420
我把公式写在这里

00:03:38.420 --> 00:03:41.720
供你参考

00:03:41.720 --> 00:03:46.695
这和嵌入 MATCH 函数一样 会返回同样的值

00:03:46.695 --> 00:03:50.100
所以 也可以把这个 MATCH 函数嵌入到 INDEX 函数中

00:03:50.100 --> 00:03:52.160
INDEX 函数会从相应的单元格中提取

00:03:52.160 --> 00:03:57.270
并返回总收入的值

